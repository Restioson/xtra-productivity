use xtra_productivity::xtra_productivity;

struct DummyActor;

impl xtra::Actor for DummyActor {}

#[derive(Clone)]
struct DummyMessage;

struct DummyMessageWithContext;

// Dummy actor, xtra::Handler and xtra::Message impls generated by xtra_productivity
#[xtra_productivity]
impl DummyActor {
    pub fn handle_dummy_message(&mut self, message: DummyMessage) -> i32 {
        let _ = message.clone();
        0
    }

    pub fn handle_dummy_message_with_context(
        &mut self,
        _message: DummyMessageWithContext,
        context: &mut xtra::Context<Self>,
    ) {
        let _ = context.address();
    }
}

struct DummyMessageWithoutMessageImpl;

#[xtra_productivity(message_impl = false)]
impl DummyActor {
    pub fn handle_dummy_message_without_message_impl(
        &mut self,
        _message: DummyMessageWithoutMessageImpl,
    ) {
    }
}

impl xtra::Message for DummyMessageWithoutMessageImpl {
    type Result = ();
}

fn assert_impls_handler<T: xtra::Handler<M>, M: xtra::Message<Result = R>, R>() {}

fn main() {
    assert_impls_handler::<DummyActor, DummyMessage, i32>();
    assert_impls_handler::<DummyActor, DummyMessageWithContext, ()>();
    assert_impls_handler::<DummyActor, DummyMessageWithoutMessageImpl, ()>();
}
