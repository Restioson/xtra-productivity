use xtra_productivity::xtra_productivity;

struct DummyActor;

#[async_trait::async_trait]
impl xtra::Actor for DummyActor {
    type Stop = ();
    async fn stopped(self) {}
}

mod inner {
    #[derive(Clone)]
    pub struct DummyMessage;
}

struct DummyMessageWithContext;

// Dummy actor, xtra::Handler and xtra::Message impls generated by xtra_productivity
#[xtra_productivity]
impl DummyActor {
    pub fn handle_dummy_message(&mut self, message: inner::DummyMessage) -> i32 {
        let _ = message.clone();
        0
    }

    pub fn handle_dummy_message_with_context(
        &mut self,
        _message: DummyMessageWithContext,
        context: &mut xtra::Context<Self>,
    ) {
        let _ = context.address();
    }
}

fn assert_impls_handler<T: xtra::Handler<M, Return = R>, M, R>() {}

fn main() {
    assert_impls_handler::<DummyActor, inner::DummyMessage, i32>();
    assert_impls_handler::<DummyActor, DummyMessageWithContext, ()>();
}
