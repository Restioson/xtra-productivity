use std::marker::PhantomData;
use xtra_productivity::xtra_productivity;

struct ActorWithParam<C> {
    ty: PhantomData<C>,
}

struct DummyMessage<C, D> {
    ty: PhantomData<(C, D)>,
}

struct DummyMessage2<A> {
    ty: PhantomData<A>,
}

trait Foo {}

impl<C: 'static + Send> xtra::Actor for ActorWithParam<C> {}

// Dummy actor, xtra::Handler and xtra::Message impls generated by xtra_productivity
#[xtra_productivity]
impl<C> ActorWithParam<C>
where
    C: Foo,
{
    pub fn handle_dummy_message(&mut self, _message: DummyMessage<C, String>) {
        assert_impls_foo::<C>();
    }

    pub fn handle_dummy_message2(&mut self, _message: DummyMessage2<String>) {}
}

fn assert_impls_foo<T: Foo>() {}

fn main() {}
